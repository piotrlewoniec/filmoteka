{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,8EAQA,MAAMC,EAAqBC,SAASC,cAAc,yBAC5CC,EAAsBF,SAASC,cAAc,eAC7CE,EAAaH,SAASC,cAAc,sBACpCG,EAAcJ,SAASC,cAAc,uBAE3CI,EAAAR,GAASS,OAAOC,OAMhBJ,EAAWK,iBAAiB,UAAUC,MAAMC,IAC1CA,EAAMC,iBAEN,MAAMC,EAAcR,EAAYS,MAAMC,OACtC,GAAoB,KAAhBF,EAIJ,IACE,MAAMG,EAAS,IAAKC,EAAAC,oBAAqBD,EAAAE,gBACnCC,EAAa,IAAKH,EAAAI,kBAAmBC,QAASC,EAAAC,WAAYC,MAAOZ,EAAaa,KAAM,GAEpFC,SADmB,EAAAC,EAAAC,cAAab,EAAQI,IACpBU,KAII,IAA1BH,EAAOI,QAAQC,QACjB1B,EAAAR,GAASS,OAAO0B,QACd,4EArBNjC,EAAmBkC,UAAY,IAyB7B,EAAAC,EAAAC,yBAAwBpC,IACxB,EAAAqC,EAAAC,iBAAgBtC,EAAoB2B,EAAOI,UAC3C,EAAAQ,EAAAC,eAAc,CACZC,UAAWzB,EACX0B,cAAetB,EACfuB,mBAAoB3C,EACpB4C,uBAAwBzC,EACxB0C,eAAgBlB,EAAOD,KACvBoB,cAAenB,EAAOoB,aAM1B,CAJE,MAAOC,GACP1C,EAAAR,GAASS,OAAO0B,QACd,2EAEJ,KCvDFE,EAAApC,EAAA,S,iEAWA,MAAMkD,EAAqBhD,SAASC,cAAc,yBAC5CgD,EAAsBjD,SAASC,cAAc,gBAEnD,EAAAiC,EAAAC,yBAAwBa,GAEEvC,WACxB,MAAMM,EAAS,IAAKC,EAAAC,oBAAqBD,EAAAkC,uBACnC/B,EAAa,IAAKH,EAAAmC,yBAA0B9B,QAASC,EAAAC,WAAYE,KAAM,GACvEC,QAAe,EAAAC,EAAAC,cAAab,EAAQI,GAQ1C,MAPa,CACXJ,OAAQA,EACRI,WAAYA,EACZuB,mBAAoBM,EACpBI,oBAAqBH,EACrBvB,OAAQA,EAEH,EAGT2B,GACGC,MAAKzB,GAGR,SAAuBA,IACrB,EAAAO,EAAAC,iBAAgBW,EAAoBnB,EAAKH,OAAOG,KAAKC,UACrD,EAAAQ,EAAAC,eAAc,CACZC,UAAWX,EAAKd,OAChB0B,cAAeZ,EAAKV,WACpBuB,mBAAoBb,EAAKa,mBACzBC,uBAAwBd,EAAKuB,oBAC7BR,eAAgBf,EAAKH,OAAOG,KAAKJ,KACjCoB,cAAehB,EAAKH,OAAOG,KAAKiB,aAEpC,CAbgBS,CAAc1B,KAC3B2B,OAAMT,GAASU,QAAQC,IAAIX,KChCH/C,SAASC,cAAc,yBAE/BO,iBAAiB,SAEpC,SAAwBE,GACtB,GAA0B,WAAtBA,EAAMiD,OAAOC,KACf,OAEF,MAAMC,EAAW7D,SAASC,cAAc,mBAClC6D,EAAqB9D,SAASC,cAAc,gBAClD4D,EAASE,UAAUC,OAAO,aAC1BF,EAAmBG,mBACjB,YACA,kqCA8CJ,WACE,MAAMC,EAAMlE,SAASC,cAAc,uBAE7BkE,EAAOnE,SAASoE,gBAAgB,6BAA8B,QACpED,EAAKE,aAAa,IAAK,0BACvBH,EAAII,YAAYH,EAClB,CAdEI,GACsBvE,SAASC,cAAc,iBAC/BuE,QAAU,WACtBX,EAASE,UAAUU,IAAI,aACvBX,EAAmB7B,UAAY,EACjC,CACF","sources":["src/js/main-page-searchByTitle.js","src/js/main-page-trending.js","src/js/ui/movie-info.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { renderMoviePlaceholders } from './ui/noApi';\nimport { axiosGetData } from './apirest/axiosGetData';\nimport { defaultHeaderGet, searchMovieUrl, searchMovieParams } from './config/stdquery';\nimport { apikeyTMDB } from './config/apikey';\nimport { renderMovieList } from './ui/cardgen';\nimport { setPagination } from './ui/pagination';\n\nconst movieListContainer = document.querySelector('.movie-list-container');\nconst paginationContainer = document.querySelector('.pagination');\nconst searchForm = document.querySelector('.header__form-item');\nconst searchInput = document.querySelector('.header__form-input');\n\nNotiflix.Notify.init();\n\nfunction clearMovieList() {\n  movieListContainer.innerHTML = '';\n}\n\nsearchForm.addEventListener('submit', async event => {\n  event.preventDefault();\n\n  const searchQuery = searchInput.value.trim();\n  if (searchQuery === '') {\n    return;\n  }\n\n  try {\n    const header = { ...defaultHeaderGet, ...searchMovieUrl };\n    const parameters = { ...searchMovieParams, api_key: apikeyTMDB, query: searchQuery, page: 1 };\n    const serverData = await axiosGetData(header, parameters);\n    const movies = serverData.data;\n    // movies.page\n    // movies.total_pages\n    // movies.total_results\n    if (movies.results.length === 0) {\n      Notiflix.Notify.failure(\n        'Search result not successful. Enter the correct movie name and try again',\n      );\n    }\n    clearMovieList();\n    renderMoviePlaceholders(movieListContainer);\n    renderMovieList(movieListContainer, movies.results);\n    setPagination({\n      headerRef: header,\n      parametersRef: parameters,\n      movieListContainer: movieListContainer,\n      paginationContainerRef: paginationContainer,\n      currentPageRef: movies.page,\n      totalPagesRef: movies.total_pages,\n    });\n  } catch (error) {\n    Notiflix.Notify.failure(\n      'Search result not successful. Enter the correct movie name and try again',\n    );\n  }\n});\n","import { renderMoviePlaceholders } from './ui/noApi';\nimport { axiosGetData } from './apirest/axiosGetData';\nimport {\n  defaultHeaderGet,\n  trendingMovieTOP20Url,\n  trendingMovieTOP20Params,\n} from './config/stdquery';\nimport { apikeyTMDB } from './config/apikey';\nimport { renderMovieList } from './ui/cardgen';\nimport { setPagination } from './ui/pagination';\n\nconst movieListContainer = document.querySelector('.movie-list-container');\nconst paginationContainer = document.querySelector('.pagination');\n\nrenderMoviePlaceholders(movieListContainer);\n\nconst trendingMoviesGet = async () => {\n  const header = { ...defaultHeaderGet, ...trendingMovieTOP20Url };\n  const parameters = { ...trendingMovieTOP20Params, api_key: apikeyTMDB, page: 1 };\n  const movies = await axiosGetData(header, parameters);\n  const data = {\n    header: header,\n    parameters: parameters,\n    movieListContainer: movieListContainer,\n    paginationContainer: paginationContainer,\n    movies: movies,\n  };\n  return data;\n};\n\ntrendingMoviesGet()\n  .then(data => displayResult(data))\n  .catch(error => console.log(error));\n\nfunction displayResult(data) {\n  renderMovieList(movieListContainer, data.movies.data.results);\n  setPagination({\n    headerRef: data.header,\n    parametersRef: data.parameters,\n    movieListContainer: data.movieListContainer,\n    paginationContainerRef: data.paginationContainer,\n    currentPageRef: data.movies.data.page,\n    totalPagesRef: data.movies.data.total_pages,\n  });\n}\n","const movieListContainer = document.querySelector('.movie-list-container');\n\nmovieListContainer.addEventListener('click', showMovieModal);\n\nfunction showMovieModal(event) {\n  if (event.target.type === 'button') {\n    return;\n  }\n  const backdrop = document.querySelector('.movie-backdrop');\n  const movieWindowContent = document.querySelector('.movie-modal');\n  backdrop.classList.remove('is-hidden');\n  movieWindowContent.insertAdjacentHTML(\n    'beforeend',\n    `<div class=\"movie-modal__info\">\n      <button class=\"button-close\">\n      <svg class=\"button-close__info\" width=\"30px\" height=\"30px\" viewBox=\"0 0 32 32\">\n            </svg>\n      </button>\n      <div class=\"movie-info__container\">\n      <img class=\"\" \n         src=\"\"\n         alt=\"\" \n         loading=\"lazy\" \n         width=\"240\" \n         height=\"357\" \n     \n         sizes=\"(min-width: 1280px) 395px, (min-width: 768px) 336px, 280px\"\n      />\n      <div class=\"movie-info__data\"\n      <h2 class=\"movie-info__title\"> MIEJSCE NA TYTUL<h2>\n\n      <ul class=\"movie-info\">\n        <li class=\"movie-info__vote\">Vote / Votes</li>\n        <li class=\"movie-info__popularity\">Popularity</li>\n        <li class=\"movie-info__original\">Original Title</li>\n        <li class=\"movie-info__genre\">Genre</li>\n      </ul>\n      <p class=\"movie-info__about\">ABOUT</p>\n\n      <ul class=\"movie-info__buttons\">\n        <li>\n        <button class=\"watched-button\" type=\"button\">Add to Watched</button>\n        </li>\n        <li>\n        <button class=\"queue-button\" type=\"button\">Add to Queue</button>\n        </li>\n      </ul>\n      </div>\n      </div>\n      </div>`,\n  );\n  createModalButtonIcon();\n  const closeModalBtn = document.querySelector('.button-close');\n  closeModalBtn.onclick = function () {\n    backdrop.classList.add('is-hidden');\n    movieWindowContent.innerHTML = '';\n  };\n}\n\nfunction createModalButtonIcon() {\n  const svg = document.querySelector('.button-close__info');\n\n  const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  path.setAttribute('d', 'M8 8L22 22, M8 22L22 8');\n  svg.appendChild(path);\n}\n// const movieCards = document.querySelectorAll('.movie-card');\n// for (const movieCard of movieCards) {\n//   movieCard.addEventListener('click', event => showMovieModal(event));\n// }\n\n// function showMovieModal(event) {\n//   if (event.target.type == 'button') {\n//     return;\n//   }\n//   const backdrop = document.querySelector('.movie-backdrop');\n//   const movieWindowContent = document.querySelector('.movie-modal');\n//   backdrop.classList.remove('is-hidden');\n//   movieWindowContent.insertAdjacentHTML(\n//     'beforeend',\n//     `<div>\n\n// <p>informacje o filmie - BEZ DELEGACJI</p> </div>`,\n//   );\n//   backdrop.onclick = function () {\n//     backdrop.classList.add('is-hidden');\n//     movieWindowContent.innerHTML = '';\n//   };\n// }\n"],"names":["$7IoHk","parcelRequire","$adb8322cc3f36f33$var$movieListContainer","document","querySelector","$adb8322cc3f36f33$var$paginationContainer","$adb8322cc3f36f33$var$searchForm","$adb8322cc3f36f33$var$searchInput","$parcel$interopDefault","Notify","init","addEventListener","async","event","preventDefault","searchQuery","value","trim","header","$3A25W","defaultHeaderGet","searchMovieUrl","parameters","searchMovieParams","api_key","$a0S8g","apikeyTMDB","query","page","movies","$8hXaC","axiosGetData","data","results","length","failure","innerHTML","$3PnVH","renderMoviePlaceholders","$caO0w","renderMovieList","$iQDRY","setPagination","headerRef","parametersRef","movieListContainer","paginationContainerRef","currentPageRef","totalPagesRef","total_pages","error","$9769bf9da6990cc8$var$movieListContainer","$9769bf9da6990cc8$var$paginationContainer","trendingMovieTOP20Url","trendingMovieTOP20Params","paginationContainer","$9769bf9da6990cc8$var$trendingMoviesGet","then","$9769bf9da6990cc8$var$displayResult","catch","console","log","target","type","backdrop","movieWindowContent","classList","remove","insertAdjacentHTML","svg","path","createElementNS","setAttribute","appendChild","$38a78c31da290818$var$createModalButtonIcon","onclick","add"],"version":3,"file":"index.078beed7.js.map"}